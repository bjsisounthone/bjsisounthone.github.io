From Java to JavaScript

As far as formal training goes, I’ve only ever used Java in introductory courses to computer science and although I call it “formal training”, the majority of the coursework
was mainly to help us students familiarize themselves with the syntax of Java. Of course, there were some lessons that also touched upon conceptual topics such as the various 
sorting algorithms or the differences between “for loops” and “do-while loops” but the core structure of the course was to make sure that we formatted our code in a way that
would produce the expected output. With only one language under my belt, I was not sure what to expect when I attempted to learn JavaScript, but after taking a cursory glance 
at some free online tutorials, the transition between the two languages was relatively painless. Although the syntax is not necessarily the same because both languages use an
object-oriented paradigm, a lot of the concepts I learned while learning Java appeared to carry over to my learning of JavaScript.
Although it may be too early in my coding journey for me to develop an opinion on what language I prefer, I would say that JavaScript feels more convenient as a language. 
For example, In JavaScript, if I wanted to compare two numbers but declared one of the numbers as a string and the other one as an integer, JavaScript will still allow me 
to make that comparison with “==”. If I really cared about the data types being the same in the comparison I can simply use “===”. With Java, I would first have to convert 
one of the data types to make the two compared objects the same data type. With just this example, JavaScript is already presenting itself as a much more dynamic language. 
One of the biggest changes to my “learning-to-code” journey is that I am now using a process called athletic software engineering. Essentially, I am provided with a coding 
problem, and I am given a set amount of time to find a solution to the given problem. This is different from how I first started learning how to code, where the deadline 
would be a couple of days or even a week. Moreover, because the problems were assigned to a given lesson, it would be expected that the solution was probably related to the 
lesson that the problem was assigned to, thus reducing the difficulty of said problems.  Admittedly, I feel like my brain becomes a lot less efficient when it knows that 
there is a time limit, but ultimately, the benefit I am finding from solving coding problems in this limited-time format is that it shows me that either I know the solution,
or I don’t. If I couldn’t determine a solution immediately after seeing a problem, I will immediately know that there is a gap in my knowledge. In addition to finding gaps 
in my knowledge quickly, I feel that learning to code in this way is more representative of what is to be expected in coding interviews. In interviews, you will probably be 
given a handful of problems to solve, and you would only have the duration of that interview to solve said problems. Overall, although it is more stressful to learn to code 
in this way, I would say that the pros of this learning style outweigh the cons. Once you have a grasp on the syntax of the language you are learning, I would recommend using
athletic software engineering to test how well you actually know coding concepts.
